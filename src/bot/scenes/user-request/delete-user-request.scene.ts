import { AddStep, Context, Ctx, Scene, SceneEnter } from 'nestjs-vk';
import { ScenesNamesEnum } from '../scenes-names.enum';
import { UserRequestService } from '../../../main-entities/user-request/user-request.service';
import { IStepContext } from '@vk-io/scenes';
import { MessagePayloadDecorator } from '../../common/decorators/message-payload.decorator';
import { ButtonColor, Keyboard, MessageContext } from 'vk-io';
import { getDateWithDayOfWeek } from '../../common';
import * as dayjs from 'dayjs';
import { UserService } from '../../../main-entities/user/user.service';

export interface DeleteUserRequestMessagePayload {
  [index: string]: string;

  command: 'back' | 'again' | 'confirm';
  selectedRequestId: string;
}

@Scene(ScenesNamesEnum.deleteRequest)
export class DeleteUserRequestScene {
  constructor(private readonly requestService: UserRequestService, private readonly userService: UserService) {}

  @SceneEnter()
  async onSceneEnter() {
    await new Promise((r) => setTimeout(r, 0));
    console.log('Enter to DeleteUserRequestScene');
  }

  @AddStep(0)
  async chooseRequest(
    @Context() context: IStepContext<DeleteUserRequestMessagePayload>,
    @MessagePayloadDecorator() payload: DeleteUserRequestMessagePayload,
    @Ctx() ctx: MessageContext,
  ) {
    if (payload.command === 'back') {
      return ctx.scene.enter(ScenesNamesEnum.userRequest);
    }

    if (context.scene.step.firstTime || !context.text) {
      const requests = await this.requestService.getUserRequests(ctx.senderId);

      const message: string[] = [];
      const keyboard = Keyboard.builder();

      for (let i = 0; i < requests.length; i++) {
        message.push(`‚Ññ${i + 1}`);
        message.push(requests[i].affiche.game.name);
        message.push(`–î–∞—Ç–∞: ${getDateWithDayOfWeek(dayjs(requests[i].affiche.dog))}`);

        if (i % 2 === 0) {
          keyboard.row();
        }

        keyboard.textButton({
          label: `‚Ññ${i + 1}`,
          payload: { selectedRequestId: requests[i].id },
          color: ButtonColor.NEGATIVE,
        });
      }

      keyboard.textButton({ label: '–ù–∞–∑–∞–¥', payload: { command: 'back' }, color: ButtonColor.POSITIVE });

      await context.send('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å: ');
      return context.send(message.join('\n'), { keyboard });
    }

    context.scene.state.selectedRequestId = payload.selectedRequestId;
    return context.scene.step.next();
  }

  @AddStep(1)
  async confirm(
    @Context() context: IStepContext<DeleteUserRequestMessagePayload>,
    @MessagePayloadDecorator() payload: DeleteUserRequestMessagePayload,
    @Ctx() ctx: MessageContext,
  ) {
    if (payload.command === 'back') {
      return ctx.scene.enter(ScenesNamesEnum.userRequest);
    }

    if (context.scene.step.firstTime || !context.text) {
      const selectedRequest = await this.requestService.getUserRequestById(
        Number(context.scene.state.selectedRequestId),
      );

      const keyboard = Keyboard.builder()
        .textButton({ label: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', payload: { command: 'confirm' }, color: ButtonColor.POSITIVE })
        .row()
        .textButton({ label: '–û—Ç–º–µ–Ω–∞', payload: { command: 'back' } });
      return context.send(
        `–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É: ${selectedRequest.affiche.game.name}\n
         –î–∞—Ç–∞:  ${getDateWithDayOfWeek(dayjs(selectedRequest.affiche.dog))}\n
         –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é" –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å
        `,
        { keyboard },
      );
    }

    return context.scene.step.next();
  }

  @AddStep(2)
  async deleteAndChooseNext(
    @Context() context: IStepContext<DeleteUserRequestMessagePayload>,
    @MessagePayloadDecorator() payload: DeleteUserRequestMessagePayload,
    @Ctx() ctx: MessageContext,
  ) {
    if (payload.command === 'back') {
      return ctx.scene.enter(ScenesNamesEnum.userRequest);
    }

    if (context.scene.step.firstTime || !context.text) {
      const { affiche } = await this.requestService.getUserRequestById(Number(context.scene.state.selectedRequestId));

      if (payload.command === 'confirm') {
        await this.requestService.deleteUserRequest(Number(context.scene.state.selectedRequestId));
      }

      const ADMIN_IDS = process.env.ADMIN_IDS.split(',').map((id) => Number(id));
      const user = await this.userService.getUser(ctx.senderId);

      for (const adminId of ADMIN_IDS) {
        await ctx.send(
          `
        –û–¢–ú–ï–ù–ê –ó–ê–Ø–í–ö–ò: \n
        –ò–≥—Ä–æ–∫: ${user.lastname + ' ' + user.firstname}, https://vk.com/id${ctx.senderId}\n
        –ò–≥—Ä–∞: ${affiche.game.name}\n
        –î–∞—Ç–∞: ${getDateWithDayOfWeek(dayjs(affiche.dog))}\n
      `,
          { user_id: adminId, peer_id: adminId },
        );
      }

      const keyboard = Keyboard.builder()
        .textButton({ label: '–ï—â—ë', payload: { command: 'again' }, color: ButtonColor.POSITIVE })
        .row()
        .textButton({ label: '–ù–∞–∑–∞–¥', payload: { command: 'back' } });

      return context.send('–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.üòî –ß—Ç–æ –¥–∞–ª—å—à–µ?', { keyboard });
    }

    context.scene.state.selectedRequestId = undefined;
    return context.scene.step.go(0);
  }
}
